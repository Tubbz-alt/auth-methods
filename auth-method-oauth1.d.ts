/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   auth-method-oauth1.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css} from 'lit-element';

import {AuthMethodBase} from './auth-method-base.js';

import {AmfHelperMixin} from '@api-components/amf-helper-mixin/amf-helper-mixin.js';

declare namespace UiElements {

  /**
   * The `<auth-method-oauth1>` element displays a form to provide the OAuth 1a settings.
   *
   * ### Example
   *
   * ```html
   * <auth-method-oauth1 consumer-key="xyz"></auth-method-oauth1>
   * ```
   *
   * ### Required form fields
   *
   * - Consumer key
   * - Timestamp
   * - Nonce
   * - Signature method
   *
   * ## Authorizing the user
   *
   * This element displays form for user input only. To perform authorization and
   * later to sign the request, add `oauth-authorization/oauth1-authorization.html`
   * to the DOM. This element sends `oauth1-token-requested` that is handled by
   * autorization element.
   *
   * Note that the OAuth1 authorization wasn't designed for browser. Most existing
   * OAuth1 implementation disallow browsers to perform the authorization by
   * not allowing POST requests to authorization server. Therefore receiving token
   * may not be possible without using browser extensions to alter HTTP request to
   * enable CORS.
   * If the server disallow obtaining authorization token and secret from clients
   * then the application should listen for `oauth1-token-requested` custom event
   * and perform authorization on the server side.
   *
   * When application is performing authorization instead of `oauth1-authorization`
   * element then the application should dispatch `oauth1-token-response` custom event
   * with `oauth_token` and `oauth_token_secret` properties set on detail object.
   * This element handles the response to reset UI state and to updates other elements
   * status that works with authorization.
   *
   * ## Signing the request
   *
   * See description for `oauth-authorization/oauth1-authorization.html` element.
   */
  class AuthMethodOauth1 extends
    ApiElements.AmfHelperMixin(
    AuthMethodBase) {

    /**
     * Returns default list of signature methods for OAuth1
     *    
     */
    readonly defaultSignatureMethods: any;

    /**
     * RAML `securedBy` obejct definition.
     * If set, it will prefill the settings in the auth panel.
     */
    amfSettings: object|null|undefined;

    /**
     * Client ID aka consumer key
     */
    consumerKey: string|null|undefined;

    /**
     * The client secret aka consumer secret
     */
    consumerSecret: string|null|undefined;

    /**
     * Oauth 1 token (from the oauth console)
     */
    token: string|null|undefined;

    /**
     * Oauth 1 token secret (from the oauth console)
     */
    tokenSecret: string|null|undefined;

    /**
     * Timestamp
     */
    timestamp: number|null|undefined;

    /**
     * The nonce generated for this request
     */
    nonce: string|null|undefined;

    /**
     * Optional realm
     */
    realm: string|null|undefined;

    /**
     * Signature method. Enum {`HMAC-SHA256`, `HMAC-SHA1`, `PLAINTEXT`}
     */
    signatureMethod: string|null|undefined;

    /**
     * True when currently authorizing the user.
     */
    _authorizing: boolean|null|undefined;

    /**
     * Authorization callback URI
     */
    redirectUri: string|null|undefined;

    /**
     * OAuth1 endpoint to obtain request token to request user authorization.
     */
    requestTokenUri: string|null|undefined;

    /**
     * Endpoint to authorize the token.
     */
    accessTokenUri: string|null|undefined;

    /**
     * HTTP method to obtain authorization header.
     * Spec recommends POST
     */
    authTokenMethod: string|null|undefined;

    /**
     * A location of the OAuth 1 authorization parameters.
     * It can be either in the URL as a query string (`querystring` value)
     * or in the authorization header (`authorization`) value.
     */
    authParamsLocation: string|null|undefined;

    /**
     * An URI to authentication endpoint where the user should be redirected
     * to auththorize the app.
     */
    authorizationUri: string|null|undefined;

    /**
     * List of currently support signature methods.
     * This can be updated when `amfSettings` property is set.
     */
    signatureMethods: any[]|null|undefined;
    constructor(type: any);
    connectedCallback(): void;
    updated(): void;
    render(): any;

    /**
     * Restores settings from stored value.
     *
     * @param settings Object returned by `_getSettings()`
     */
    restore(settings: object|null): void;
    _createModel(type: any): any;
    _attachListeners(): void;
    _detachListeners(): void;

    /**
     * Validates the form.
     *
     * @returns `true` if valid, `false` otherwise.
     */
    validate(): Boolean|null;
    getSettings(): any;

    /**
     * Sends the `oauth2-token-requested` event.
     *
     * @returns True if event was sent. Can be false if event is not
     * handled or when the form is invalid.
     */
    authorize(): Boolean|null;

    /**
     * Handles OAuth1 authorization errors.
     */
    _oauth1ErrorHandler(e: CustomEvent|null): void;

    /**
     * Handler for the `oauth1-token-response` custom event.
     * Sets `token` and `tokenSecret` properties from the event.
     */
    _tokenResponseHandler(e: CustomEvent|null): void;

    /**
     * Sets timestamp in seconds
     */
    _genTimestamp(): void;

    /**
     * Sets autogenerated nocne
     */
    _genNonce(): void;

    /**
     * Called when the AMF object change
     */
    _amfSettingsChanged(): void;
    _selectionHandler(e: any): void;
    _valueHandler(e: any): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "auth-method-oauth1": UiElements.AuthMethodOauth1;
  }
}
