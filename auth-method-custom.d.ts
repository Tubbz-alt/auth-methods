/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   auth-method-custom.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css} from 'lit-element';

import {AuthMethodBase} from './auth-method-base.js';

import {AmfHelperMixin} from '@api-components/amf-helper-mixin/amf-helper-mixin.js';

declare namespace UiElements {

  /**
   * The `<auth-method-custom>` element displays a form to provide the
   * authorization details for RAML's custom security scheme.
   *
   * The element, alike other auth methods, dispatches `auth-settings-changed`
   * custom event. However, it also sends `request-header-changed` and
   * `query-parameters-changed` custom event to directly manipulate values
   * in corresponding UI element. This events are supported with all API components
   * that handles headers or query parameters.
   *
   * This element is rendered empty if `amfSettings` property is not set.
   * Parent element or application should check if model contains the scheme.
   *
   * ### Example
   *
   * ```html
   * <auth-method-custom securityscheme="{...}"></auth-method-custom>
   * ```
   */
  class AuthMethodCustom extends
    AmfHelperMixin(
    AuthMethodBase) {
    readonly _hasSchemeDescription: any;

    /**
     * AMF security scheme model.
     */
    amfSettings: object|null|undefined;
    readonly _transformer: any;

    /**
     * Computed list of headers to render in the form.
     */
    _headers: any[]|null|undefined;

    /**
     * Computed list of query parameters to render.
     */
    _queryParameters: any[]|null|undefined;

    /**
     * Name of the security scheme
     */
    _schemeName: string|null|undefined;

    /**
     * Security scheme description
     */
    _schemeDescription: string|null|undefined;

    /**
     * True to opend scheme descripyion, if available.
     */
    documentationOpened: boolean|null|undefined;
    constructor(type: any);
    disconnectedCallback(): void;
    firstUpdated(): void;
    render(): any;
    _attachListeners(node: any): void;
    _detachListeners(node: any): void;
    _getHeadersTemplate(): any;
    _getQueryTemplate(): any;
    _formListTemplate(items: any, type: any): any;
    _formItemTemplate(item: any, index: any, outlined: any, compatibility: any, readOnly: any, disabled: any, noDocs: any, type: any): any;

    /**
     * Validates the form.
     *
     * @returns `true` if valid, `false` otherwise.
     */
    validate(): Boolean|null;
    _schemeChanged(): void;
    _readParamsProperties(scheme: any): any;

    /**
     * Generates view model using the tranformer.
     *
     * @param type Param type. Either `header` or `parameter`.
     */
    _createViewModel(type: String|null, model: any[]|null): void;

    /**
     * Returns current configuration of the OAuth2.
     *
     * @returns Current OAuth2 configuration.
     */
    getSettings(): object|null;

    /**
     * Toggles documentartion for custom property.
     */
    _toggleDocumentation(e: CustomEvent|null): void;

    /**
     * Toggles docs opened state
     */
    toggleSchemeDocumentation(): void;

    /**
     * Handler for the `request-header-changed` event.
     * It updates value for a single header if this header is already on the list.
     */
    _headerChangedHandler(e: CustomEvent|null): void;

    /**
     * Handler for the `query-parameter-changed` event.
     * It updates value for a single parameter if this parameter is already on the list.
     */
    _parameterChangedHandler(e: CustomEvent|null): void;

    /**
     * Update array value for given type (`headers` or `queryParameters`) for given event.
     *
     * @param model Model to use to update the value.
     */
    _updateEventValue(e: CustomEvent|null, model: any[]|null): void;

    /**
     * Handler for the `value-changed` event disaptched by input element.
     * Dispatches 'request-header-changed' or 'query-parameter-changed'
     * event. Other components can update their state when the value change.
     */
    _inputValueChanged(e: CustomEvent|null): void;

    /**
     * Dispatches header/query parameter changed event - depending on the type.
     *
     * @param type `header` or `query`
     * @param name name of the property
     * @param value changed value
     */
    _dispatchParamChanged(type: String|null, name: String|null, value: String|null): void;

    /**
     * Calls `_dispatchParamChanged()` on each item to notify other editors about
     * value change.
     *
     * @param type Changed type.
     * @param data View model
     */
    _notifyModelChanged(type: String|null, data: String|null): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "auth-method-custom": UiElements.AuthMethodCustom;
  }
}
